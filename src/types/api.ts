/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/v1/login": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** ログイン */
    post: operations["login"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/logout": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** ログアウト */
    post: operations["auth.logout"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/register": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** ユーザー登録 */
    post: operations["auth.register"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/refresh": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** トークンのリフレッシュ */
    post: operations["auth.refresh"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/tasks": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** タスク一覧取得 */
    get: operations["task.index"];
    put?: never;
    /** 新規タスク作成 */
    post: operations["tasks.store"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/tasks/{task}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** タスク単体取得 */
    get: operations["tasks.show"];
    /** タスク更新 */
    put: operations["tasks.update"];
    post?: never;
    /** タスク削除 */
    delete: operations["tasks.destroy"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/tasks/{task}/actions": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** タスクに対応するアクション一覧 */
    get: operations["actions.index"];
    put?: never;
    /** タスクに対応するアクション作成 */
    post: operations["actions.store"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/tasks/{task}/actions/{action}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** タスクに対応するアクション更新 */
    put: operations["actions.update"];
    post?: never;
    /** タスクに対応するアクション削除 */
    delete: operations["actions.destroy"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/users/me": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 自身のユーザ取得 */
    get: operations["user.me"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/users": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** ユーザ一覧取得 */
    get: operations["user.index"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/users/{user}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put: operations["users.update"];
    post?: never;
    delete: operations["users.destroy"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/v1/users/me/tasks": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** 自身のタスク一覧取得 */
    get: operations["userMeTask.index"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** LoginRequest */
    LoginRequest: {
      /** Format: email */
      email: string;
      password: string;
    };
    /** StoreTaskActionRequest */
    StoreTaskActionRequest: {
      name: string;
      is_done?: boolean;
    };
    /** TaskActionResource */
    TaskActionResource: {
      id: number;
      task_id: number;
      name: string;
      is_done: boolean;
      /** Format: date-time */
      created_at: string | null;
      /** Format: date-time */
      updated_at: string | null;
      /** Format: date-time */
      deleted_at: string | null;
    };
    /** TaskResource */
    TaskResource: {
      id: number;
      title: string;
      description: string | null;
      is_public: boolean;
      is_done: boolean;
      /** Format: date-time */
      expired_at: string | null;
      created_user_id: number;
      /** Format: date-time */
      created_at: string | null;
      /** Format: date-time */
      updated_at: string | null;
      created_user: components["schemas"]["UserResource"];
      assigned_users: components["schemas"]["UserResource"][];
    };
    /** UpdateTaskActionRequest */
    UpdateTaskActionRequest: {
      name?: string;
      is_done?: boolean;
    };
    /** UserResource */
    UserResource: {
      id: number;
      name: string;
      email: string;
      /** Format: date-time */
      email_verified_at: string | null;
      /** Format: date-time */
      created_at: string | null;
      /** Format: date-time */
      updated_at: string | null;
    };
  };
  responses: {
    /** @description Validation error */
    ValidationException: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": {
          /** @description Errors overview. */
          message: string;
          /** @description A detailed description of each field that failed validation. */
          errors: {
            [key: string]: string[];
          };
        };
      };
    };
    /** @description Authorization error */
    AuthorizationException: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": {
          /** @description Error overview. */
          message: string;
        };
      };
    };
    /** @description Unauthenticated */
    AuthenticationException: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": {
          /** @description Error overview. */
          message: string;
        };
      };
    };
    /** @description Not found */
    ModelNotFoundException: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": {
          /** @description Error overview. */
          message: string;
        };
      };
    };
  };
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  login: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoginRequest"];
      };
    };
    responses: {
      /** @description ログイン成功 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": string;
        };
      };
      /** @description 未認証 */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Unauthorized */
            error: string;
          };
        };
      };
      403: components["responses"]["AuthorizationException"];
      422: components["responses"]["ValidationException"];
    };
  };
  "auth.logout": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 成功 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Successfully logged out */
            message: string;
          };
        };
      };
    };
  };
  "auth.register": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          name: string;
          /** Format: email */
          email: string;
          password: string;
          password_confirmation: string;
        };
      };
    };
    responses: {
      /** @description 成功 */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": string;
        };
      };
      422: components["responses"]["ValidationException"];
    };
  };
  "auth.refresh": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 成功 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            token: string;
          };
        };
      };
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Token not provided */
            error: string;
          };
        };
      };
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Could not refresh token */
            error: string;
            detail: string;
          };
        };
      };
    };
  };
  "task.index": {
    parameters: {
      query?: {
        is_public?: boolean | null;
        is_done?: boolean | null;
        expired_before?: string | null;
        expired_after?: string | null;
        created_user_id?: number | null;
        assigned_user_id?: number | null;
        sort_by?: "title" | "expired_at" | "created_at" | "updated_at" | null;
        sort_order?: "asc" | "desc" | null;
        created_user_ids?: number[] | null;
        assigned_user_ids?: number[] | null;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 成功 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            tasks: components["schemas"]["TaskResource"][];
          };
        };
      };
      401: components["responses"]["AuthenticationException"];
      403: components["responses"]["AuthorizationException"];
      422: components["responses"]["ValidationException"];
    };
  };
  "tasks.store": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          title: string;
          is_public: boolean;
          description?: string | null;
          /** Format: date-time */
          expired_at?: string | null;
          assigned_user_ids?: number[] | null;
        };
      };
    };
    responses: {
      /** @description `TaskResource` */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            task: components["schemas"]["TaskResource"];
          };
        };
      };
      401: components["responses"]["AuthenticationException"];
      422: components["responses"]["ValidationException"];
    };
  };
  "tasks.show": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The task ID */
        task: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description `TaskResource` */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            task: components["schemas"]["TaskResource"];
          };
        };
      };
      401: components["responses"]["AuthenticationException"];
      404: components["responses"]["ModelNotFoundException"];
    };
  };
  "tasks.update": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The task ID */
        task: number;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": {
          title?: string;
          is_public?: boolean;
          /** Format: date-time */
          expired_at?: string | null;
          description?: string | null;
          is_done?: boolean;
          assigned_user_ids?: number[] | null;
        };
      };
    };
    responses: {
      /** @description `TaskResource` */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            task: components["schemas"]["TaskResource"];
          };
        };
      };
      401: components["responses"]["AuthenticationException"];
      404: components["responses"]["ModelNotFoundException"];
      422: components["responses"]["ValidationException"];
    };
  };
  "tasks.destroy": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The task ID */
        task: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      401: components["responses"]["AuthenticationException"];
      404: components["responses"]["ModelNotFoundException"];
    };
  };
  "actions.index": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The task ID */
        task: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 成功 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            actions: components["schemas"]["TaskActionResource"][];
          };
        };
      };
      401: components["responses"]["AuthenticationException"];
      404: components["responses"]["ModelNotFoundException"];
    };
  };
  "actions.store": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The task ID */
        task: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["StoreTaskActionRequest"];
      };
    };
    responses: {
      /** @description `TaskActionResource` */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TaskActionResource"];
        };
      };
      401: components["responses"]["AuthenticationException"];
      403: components["responses"]["AuthorizationException"];
      404: components["responses"]["ModelNotFoundException"];
      422: components["responses"]["ValidationException"];
    };
  };
  "actions.update": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The task ID */
        task: number;
        /** @description The action ID */
        action: number;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["UpdateTaskActionRequest"];
      };
    };
    responses: {
      /** @description `TaskActionResource` */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TaskActionResource"];
        };
      };
      401: components["responses"]["AuthenticationException"];
      403: components["responses"]["AuthorizationException"];
      404: components["responses"]["ModelNotFoundException"];
      422: components["responses"]["ValidationException"];
    };
  };
  "actions.destroy": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The task ID */
        task: number;
        /** @description The action ID */
        action: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      401: components["responses"]["AuthenticationException"];
      404: components["responses"]["ModelNotFoundException"];
    };
  };
  "user.me": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description `UserResource` */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            user: components["schemas"]["UserResource"];
          };
        };
      };
      401: components["responses"]["AuthenticationException"];
    };
  };
  "user.index": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 成功 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            users: components["schemas"]["UserResource"][];
          };
        };
      };
      401: components["responses"]["AuthenticationException"];
    };
  };
  "users.update": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The user ID */
        user: number;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": {
          name?: string;
          /** Format: email */
          email?: string;
          password?: string;
          password_confirmation?: string;
        };
      };
    };
    responses: {
      /** @description `UserResource` */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            user: components["schemas"]["UserResource"];
          };
        };
      };
      401: components["responses"]["AuthenticationException"];
      404: components["responses"]["ModelNotFoundException"];
      422: components["responses"]["ValidationException"];
    };
  };
  "users.destroy": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The user ID */
        user: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      401: components["responses"]["AuthenticationException"];
      404: components["responses"]["ModelNotFoundException"];
    };
  };
  "userMeTask.index": {
    parameters: {
      query?: {
        is_public?: boolean | null;
        is_done?: boolean | null;
        expired_before?: string | null;
        expired_after?: string | null;
        created_user_id?: number | null;
        assigned_user_id?: number | null;
        sort_by?: "title" | "expired_at" | "created_at" | "updated_at" | null;
        sort_order?: "asc" | "desc" | null;
        created_user_ids?: number[] | null;
        assigned_user_ids?: number[] | null;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description 成功 */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            tasks: components["schemas"]["TaskResource"][];
          };
        };
      };
      401: components["responses"]["AuthenticationException"];
      403: components["responses"]["AuthorizationException"];
      422: components["responses"]["ValidationException"];
    };
  };
}
